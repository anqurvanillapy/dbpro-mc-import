#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

if (process.argv.length !== 4) {
  console.error('Usage: mc2db filename outdir')
  process.exit(1)
}

let [filename, outdir] = [2, 3].map(i => process.argv[i])

let mcData = fs.readFileSync(filename)
;[generateDBFile, generateTexture].map(f => {
  fs.writeFileSync(...f(mcData))
})

function generateDBFile (mcData) {
  var DBJson = {}
// @begin convertToDBData
  var i
  var data = JSON.parse(mcData)
  var name = Object.keys(data.mc)[0]
  var res = data.res
  var resNames = Object.keys(res)
  var resFrames = data.mc[name].frames
  var labels = data.mc[name].labels
  var duration = resNames.length - 1

  // Attributes.
  DBJson['name'] = name
  DBJson['version'] = '4.5'
  DBJson['frameRate'] = data.mc[name].frameRate || 24
  DBJson['armature'] = []
  DBJson['isGlobal'] = 0

  /**
   *  Adapter of armature.
   *
   *  `skin' and `animation' will be adapted for an armature skeleton.
   */
  var mc = {}

  mc['defaultActions'] = [{ gotoAndPlay: 'newAnimation' }]
  mc['type'] = 'MovieClip'
  mc['name'] = 'MyDisplay'
  mc['ik'] = []
  mc['aabb'] = { width: 0, height: 0, x: 0, y: 0 }

  /* Skin. */
  var skin = [{
    name: '',
    slot: [{
      display: [],
      name: 'foo'
    }]
  }]

  for (i = 0; i <= duration; ++i) {
    let rN = resNames[i]
    let f = resFrames[resFrames.map(function (o) { return o.res }).indexOf(rN)]
    let r = res[resNames[i]]
    let offsetX = (f.x) ? r.w / 2.0 + f.x : 0
    let offsetY = (f.y) ? r.h / 2.0 + f.y : 0

    skin[0].slot[0].display.push({
      type: 'image',
      name: rN,
      transform: {x: offsetX, y: offsetY}
    })
  }

  skin[0].slot[0].display.push({
    filterType: 'armature',
    type: 'armature',
    name: 'MyArmature',
    transform: {}
  })

  mc['skin'] = skin

  /* Animation. */
  var animations = []

  // Mock a label.
  if (!labels || !labels.length) {
    labels = [{
      name: 'newAnimation',
      frame: 1,
      end: duration + 1
    }]
    console.log(labels)
  }

  for (var l = 0; l < labels.length; ++l) {
    var slot = [{ frame: [], name: 'foo' }]
    var subDuration = labels[l].end - labels[l].frame
    var animation = {
      frame: [],
      slot: slot,
      ffd: [],
      bone: [],
      playTimes: 0,
      duration: subDuration,
      name: labels[l].name
    }

    for (i = labels[l].frame - 1; i < labels[l].end; ++i) {
      try {
        animation.slot[0].frame.push({
          displayIndex: resNames.indexOf(resFrames[i].res),
          duration: 1,
          tweenEasing: null,
          color: {}
        })
      } catch (e) {
        subDuration = i - 1
        console.log(`WARNING: Frame ${i} not found, may be mismatched by label`)
        break
      }
    }

    animation.slot[0].frame[subDuration].duration = 0

    // First empty one in bones.
    var bones = []

    bones.push({
      frame: [{
        transform: {},
        duration: subDuration,
        tweenEasing: null
      }],
      name: 'root'
    })

    bones.push({ frame: [], name: 'foo' })

    // Transforming of the axis.
    for (i = labels[l].frame - 1; i < labels[l].end; ++i) {
      bones[1].frame.push({
        transform: {x: 0, y: 0},
        duration: 1,
        tweenEasing: null
      })
    }

    bones[1].frame[subDuration].duration = 0

    animation['bone'] = bones
    animations.push(animation)
  }

  mc['animation'] = animations

  /* Bone and slot. */
  mc['bone'] = [{
    name: 'root',
    transform: {}
  }, {
    name: 'foo',
    parent: 'root',
    transform: {}
  }]

  mc['slot'] = [{
    displayIndex: -1,
    name: 'foo',
    parent: 'foo',
    color: {}
  }]

  // Phew!
  DBJson['armature'].push(mc)
// @end
  return [path.join(outdir, `${name}_ske.json`), JSON.stringify(DBJson)]
}

function generateTexture (mcData) {
  var dbTexture = {}

// @begin convertToDBTextureAtlasData
  var data = JSON.parse(mcData)
  var res = data['res']
  var name = Object.keys(data.mc)[0]

  // Attributes.
  dbTexture['name'] = name
  dbTexture['imagePath'] = data['file'] || name + '.png'
  dbTexture['SubTexture'] = []

  // Resources.
  var resNames = Object.keys(res)
  for (var i = 0; i < resNames.length; ++i) {
    dbTexture['SubTexture'].push({
      name: resNames[i],
      x: res[resNames[i]].x,
      y: res[resNames[i]].y,
      width: res[resNames[i]].w,
      height: res[resNames[i]].h
    })
  }
// @end
  return [path.join(outdir, `${name}_tex.json`), JSON.stringify(dbTexture)]
}
