#!/usr/bin/env node

const fs = require('fs')

if (process.argv.length !== 3) {
  console.error('Usage: mc2db filename')
  process.exit(1)
}

let mcData = fs.readFileSync(process.argv[2])
;[generateDBFile, generateTexture].map(f => {
  fs.writeFileSync(...f(mcData))
})

function generateDBFile (mcData) {
  var DBJson = {}

  var i
  var data = JSON.parse(mcData)
  var name = Object.keys(data.mc)[0]
  var res = data.res
  var resName = Object.keys(res)
  var resFrames = data.mc[name].frames
  var duration = resName.length - 1

  // Attributes.
  DBJson['name'] = name
  DBJson['version'] = '4.5'
  DBJson['frameRate'] = data.mc[name].frameRate || 24
  DBJson['armature'] = []
  DBJson['isGlobal'] = 0

  /**
   *  Adapter of armature.
   *
   *  `skin' and `animation' will be adapted for an armature skeleton.
   */
  var mc = {}

  mc['defaultActions'] = [{ gotoAndPlay: 'newAnimation' }]
  mc['type'] = 'MovieClip'
  mc['name'] = 'MyDisplay'
  mc['ik'] = []
  mc['aabb'] = { width: 0, height: 0, x: 0, y: 0 }

  /* Skin. */
  var skin = [{
    name: '',
    slot: [{
      display: [],
      name: 'foo'
    }]
  }]

  for (i = 0; i <= duration; ++i) {
    skin[0].slot[0].display.push({
      type: 'image',
      name: resName[i],
      transform: {x: 0, y: 0}
    })
  }

  skin[0].slot[0].display.push({
    filterType: 'armature',
    type: 'armature',
    name: 'MyArmature',
    transform: {}
  })

  mc['skin'] = skin

  /* Animation. */
  var animation = [{
    frame: [],
    slot: [{ frame: [], name: 'foo' }],
    ffd: [],
    bone: [],
    playTimes: 0,
    duration: duration,
    name: 'newAnimation'
  }]

  for (i = 0; i <= duration; ++i) {
    animation[0].slot[0].frame.push({
      displayIndex: resName.indexOf(resFrames[i].res),
      duration: 1,
      tweenEasing: null,
      color: {}
    })
  }

  animation[0].slot[0].frame[duration].duration = 0

  // First empty one in bones.
  var bones = []

  bones.push({
    frame: [{
      transform: {},
      duration: duration,
      tweenEasing: null
    }],
    name: 'root'
  })

  bones.push({ frame: [], name: 'foo' })

  for (i = 0; i <= duration; ++i) {
    bones[1].frame.push({
      transform: {x: 0, y: 0},
      duration: 1,
      tweenEasing: null
    })
  }

  bones[1].frame[duration].duration = 0

  animation[0]['bone'] = bones
  mc['animation'] = animation

  /* Bone and slot. */
  mc['bone'] = [{
    name: 'root',
    transform: {}
  }, {
    name: 'foo',
    parent: 'root',
    transform: {}
  }]

  mc['slot'] = [{
    displayIndex: -1,
    name: 'foo',
    parent: 'foo',
    color: {}
  }]

  // Phew!
  DBJson['armature'].push(mc)

  return [`${name}_ske.json`, JSON.stringify(DBJson)]
}

function generateTexture (mcData) {
  var dbTexture = {}

  var data = JSON.parse(mcData)
  var res = data['res']
  var name = Object.keys(data.mc)[0]

  // Attributes.
  dbTexture['name'] = name
  dbTexture['imagePath'] = data['file'] || name + '.png'
  dbTexture['SubTexture'] = []

  // Resources.
  var resNames = Object.keys(res)
  for (var i = 0; i < resNames.length; ++i) {
    dbTexture['SubTexture'].push({
      name: resNames[i],
      x: res[resNames[i]].x,
      y: res[resNames[i]].y,
      width: res[resNames[i]].w,
      height: res[resNames[i]].h
    })
  }

  return [`${name}.json`, JSON.stringify(dbTexture)]
}
